<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.Member">
	<resultMap id="MemberMap" type="MemberVO">
        <result column="id"            property="id"   />
        <result column="password"      property="password"  />
        <result column="email"         property="email"/>
        <result column="grade"         property="grade"/>  
        <result column="reg_date"          property="regdate"/> 
        <result column="no"        property="no"/>   
    </resultMap>    
    
    <!-- 아이디로 회원정보 반환 -->
    <select id="selectOne" parameterType="MemberVO"  resultMap="MemberMap" >
        SELECT *
        FROM member
        WHERE id = #{id}
    </select>
    
    
    <select id="selectOneMypage" parameterType="MemberVO"  resultMap="MemberMap" >
        SELECT  grade, id, password,
        SUBSTR(email, 1, INSTR(email, '@')-1)AS emailFront,
        SUBSTR(email, INSTR(email, '@') + 1) AS emailBack
        FROM member
        WHERE id = #{id} 
    </select>
    
    <!-- 아이디 체크 -->
    <select id="idCheck" parameterType="MemberVO" resultType="int">
      SELECT COUNT(*) cnt
      FROM member
      WHERE id = #{id}
    </select>
    
    
    <!-- 이메일 체크 -->
    <select id="emailCheck" parameterType="MemberVO" resultType="int">
      SELECT COUNT(*) cnt
      FROM member
      WHERE email = #{email}
    </select>
    
    <!-- 등급 체크 -->
    <select id="gradeCheck" parameterType="MemberVO" resultMap="MemberMap">
      SELECT COUNT(*) cnt
      FROM member
      WHERE id = #{id}
    </select>
    
    <select id="gradeCheckid" parameterType="MemberVO" resultMap="MemberMap">
      SELECT grade
      FROM member
      WHERE id = #{id}
    </select>
    
    <!-- 아이디 + 패스워드 체크 -->
    <select id="passCheck" parameterType="MemberVO" resultType="int">
      SELECT COUNT(*) cnt
      FROM member
      WHERE id = #{id}
      AND password = #{password}
    </select>
    
  <!-- 이메일로  아이디 존재 여부 검색 -->
  <select id="searchIdCheck" parameterType="MemberVO" resultType="int">
    SELECT COUNT(*) cnt
    FROM member
    WHERE email  = #{email}
    </select>    
    
    <!-- 이메일로  아이디 검색 -->
    <select id="searchId" parameterType="MemberVO" resultMap="MemberMap">
      SELECT id
      FROM member
      WHERE email  = #{email}
    </select>
        
    <select id="searchgrade" parameterType="MemberVO" resultMap="MemberMap">
      SELECT grade
      FROM member
      WHERE id  = #{id}
    </select>    
       
    <!-- id + 이메일  비밀번호 여부 검색 -->
    <select id="searchPwCheck" parameterType="MemberVO" resultType="int">
      SELECT COUNT(*) cnt
      FROM member
      WHERE email = #{email}
      AND id     = #{id}
    </select>
    
     <!-- id + 이메일로  비밀번호 검색 -->
    <select id="searchPw" parameterType="MemberVO" resultMap="MemberMap">
      SELECT password
      FROM member
      WHERE email = #{email}
      AND id  = #{id}
    </select>
    
    
    
    <!-- 회원가입  -->
    <insert id="insertOne" parameterType="MemberVO" >
    INSERT INTO member (    
		        grade,     
                id,       
                password, 
                email,
                reg_date,
                no
     ) VALUES (
        #{grade},    
        #{id},       
        #{password},        
        #{email},
        SYSDATE,
        MEMBER_SEQ.NEXTVAL
     )      
  </insert>  
    
  <!-- 사용자 비밀번호 변경 -->
  <update id="updatepassword" parameterType="MemberVO">
    UPDATE member         
    SET  password = #{password}   
    WHERE id = #{id}
    AND email  = #{email}
  </update>
  
  <!-- 사용자 정보 변경 -->
  <update id="updateUser" parameterType="MemberVO">
    UPDATE member         
    SET id      = #{id},  
        password  = #{password},
        email     = #{email}
    WHERE no = #{no}
  </update>
  
    <!-- 계정 정지 (등급 3은 아이디가 정지되어 로그인이 불가능) -->
	  <update id="forbiddenUser" parameterType="MemberVO">
	    UPDATE member         
	    SET grade = 3
	    WHERE id = #{id}
	  </update>
	  
	  <!-- 계정 정지 해제 (등급 3은 아이디가 정지되어 로그인이 불가능) -->
    <update id="clearUser" parameterType="MemberVO">
      UPDATE member         
      SET grade = 1
      WHERE id = #{id}
    </update>

  
  <!-- 유저 삭제 -->
  <delete id="deleteOne" parameterType="MemberVO">
    DELETE FROM member
    WHERE id = #{id}
  </delete>
</mapper>